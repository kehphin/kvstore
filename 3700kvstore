#!/usr/bin/env python

import sys, socket, select, time, json, random, math

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# gives the current time in milliseconds since epoch
def getTimestamp():
  return int(time.time() * 1000)

# global vars
QUORUM = math.floor(((len(replica_ids) + 1) / 2 ) + 1)
TERM = 0
LEADER_TIMEOUT = 1000 # 1 second
LAST_LEADER_TIMESTAMP = getTimestamp() 
IS_TIMEDOUT_FROM_LEADER = False
LAST_ELECTION_TIMESTAMP = 0
ELECTION_TIMEOUT = 500
LEADER_VOTES = 0
CURRENT_TERM_VOTE = None


def checkLastLeaderTimestamp():
	global IS_TIMEDOUT_FROM_LEADER

	if (getTimestamp() - LAST_LEADER_TIMESTAMP > LEADER_TIMEOUT):
		IS_TIMEDOUT_FROM_LEADER = True

		if (getTimestamp() - LAST_ELECTION_TIMESTAMP > ELECTION_TIMEOUT):
			startElection()


def startElection():
	global TERM
	global LAST_ELECTION_TIMESTAMP

	TERM = TERM + 1
	LEADER_VOTES = 1


	for replica in replica_ids:
		LAST_ELECTION_TIMESTAMP = getTimestamp()
		sock.send(json.dumps({'src': my_id, 'dst': replica, 'leader': my_id,
				                  'type': 'elect'}) + '\n')

def handleElectionMsg(msg):
	global CURRENT_TERM_VOTE
	if (IS_TIMEDOUT_FROM_LEADER):
		CURRENT_TERM_VOTE = msg['src']
		sock.send(json.dumps({'src': my_id, 'dst': msg['src'], 'leader': msg['src'],
				                  'type': 'vote'}) + '\n')

def handleVoteMsg(msg):
	global LEADER_VOTES

	LEADER_VOTES = LEADER_VOTES + 1

	if (LEADER_VOTES >= QUORUM):
		print 'we are the new leader! ' + msg['dst']



# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
sock.connect(my_id)

last = 0

while True:
	# Blocks every 0.1 sec
	ready = select.select([sock], [], [], 0.1)[0]

	# Check to see if we have timed out from the leader
	checkLastLeaderTimestamp()

	if sock in ready:
		raw = sock.recv(32768)
		
		# we may receive multiple messages during a single recv(); \n denotes the break between messages
		for msg_raw in raw.split('\n'):
			if len(msg_raw) == 0: continue
			msg = json.loads(msg_raw)
			# {u'src': u'001C', u'dst': u'0004', u'MID': u'RUOGHAVY5WKOBT4Z', 
			# u'value': u'cf52a3ceb2de663d19b5516bda582426', u'key': u'VS45EDCU5XSDO3I1MGWQASAW7P31SRJA', 
			# u'type': u'put', u'leader': u'FFFF'}

			# For now, respond to all client messages with a type=fail response
			if msg['type'] in ['get', 'put']:
				sock.send(json.dumps({'src': my_id, 'dst': msg['src'], 'leader': 'FFFF',
				                      'type': 'fail', 'MID': msg['MID']}) + '\n')

			# new election process
			if msg['type'] == 'elect':
				handleElectionMsg(msg)

			# handle vote
			if msg['type'] == 'vote':
				handleVoteMsg(msg)
		
			# Handle noop messages. This may be removed from your final implementation
			elif msg['type'] == 'noop':
				print '%s received a NOOP from %s' % (msg['dst'], msg['src'])
		
	clock = time.time()
	if clock-last > 2:
		# Send a no-op message to a random peer every two seconds, just for fun
		# You definitely want to remove this from your implementation
		msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
		sock.send(json.dumps(msg) + '\n')
		print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
		last = clock
